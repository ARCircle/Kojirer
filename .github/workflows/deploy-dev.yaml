name: CD (Development)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'ブランチまたはコミット'
        required: true
        default: 'main'

# ===== 権限 =====
permissions:
  contents: read # コード取得
  packages: write # GHCR へ push
  id-token: write

concurrency:
  group: 'deploy-dev'
  cancel-in-progress: true # 新しいデプロイが来たら前をキャンセル

jobs:
  check-permission:
    runs-on: ubuntu-latest
    steps:
      - name: Check if user is organization member
        run: |
          # 組織メンバーかチェック
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/orgs/ARCircle/members/${{ github.actor }}")
          if [ "$response" == "{}" ]; then
            echo "::error::組織メンバーのみがdev環境をデプロイできます"
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: check-permission
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Prepare image tag
        id: meta
        run: |
          repo_lc="$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')"
          commit_sha="${{ github.sha }}"
          if [ "${{ inputs.branch }}" != "main" ]; then
            commit_sha=$(git rev-parse HEAD)
          fi
          echo "FULL_IMAGE=ghcr.io/${repo_lc}:${commit_sha}" >> "$GITHUB_OUTPUT"

      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push web image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.FULL_IMAGE }}
          target: production
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - uses: imranismail/setup-kustomize@v1

      - name: Find available dev slot
        id: find-slot
        uses: actions-hub/kubectl@v1.33.3
        env:
          KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        with:
          args: |
            # 利用可能なdev-1からdev-4のスロットを探す
            for i in 1 2 3 4; do
              if ! kubectl get deployment dev-$i-kojirer >/dev/null 2>&1; then
                echo "slot=dev-$i" >> $GITHUB_OUTPUT
                echo "Available slot found: dev-$i"
                exit 0
              fi
            done
            echo "::error::All dev slots (dev-1 to dev-4) are occupied"
            exit 1

      - name: Set image tag in kustomize overlay
        working-directory: k8s/overlays/dev
        run: |
          kustomize edit set image kojirer=${{ steps.meta.outputs.FULL_IMAGE }}

      - name: Update dev overlay with slot
        working-directory: k8s/overlays/dev
        run: |
          # スロット番号をnamePrefix に設定
          sed -i "s/namePrefix: dev-/namePrefix: ${{ steps.find-slot.outputs.slot }}-/" kustomization.yaml
          # environment label もスロット名に設定
          sed -i "s/environment: dev-template/environment: ${{ steps.find-slot.outputs.slot }}/" kustomization.yaml
          # Secret名をスロット名に変更
          sed -i "s/name: dev-slot-env/name: ${{ steps.find-slot.outputs.slot }}-env/g" deployment-patch.yaml
          sed -i "s/name: dev-slot-env/name: ${{ steps.find-slot.outputs.slot }}-env/g" prisma-studio.yaml

      - name: Build manifest with kustomize
        run: kustomize build k8s/overlays/dev > manifest.yaml

      - name: Apply manifest
        uses: actions-hub/kubectl@v1.33.3
        env:
          KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        with:
          args: apply -f manifest.yaml

      - name: Wait for app rollout
        uses: actions-hub/kubectl@v1.33.3
        env:
          KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        with:
          args: rollout status deployment/${{ steps.find-slot.outputs.slot }}-kojirer --timeout=600s

      - name: Wait for prisma-studio rollout
        uses: actions-hub/kubectl@v1.33.3
        env:
          KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        with:
          args: rollout status deployment/${{ steps.find-slot.outputs.slot }}-prisma-studio --timeout=300s

      - name: Get service info
        uses: actions-hub/kubectl@v1.33.3
        env:
          KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        with:
          args: get svc ${{ steps.find-slot.outputs.slot }}-kojirer -o jsonpath='{.spec.clusterIP}:{.spec.ports[0].port}'

      - name: Cleanup temp files
        run: |
          rm -f manifest.yaml
